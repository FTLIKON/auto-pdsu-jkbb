# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type jkbb {
  id: ID!
  account: String
  password: String
  departName: String
  instructorName: String
  address: String
  latitude: String
  longitude: String
  permanentAddress: String
  isStayLocal: String
  isStaySchool: String
  phone_number: String
  emergencyName: String
  emergencyPhone: String
}

input jkbbWhereUniqueInput {
  id: ID
}

input jkbbWhereInput {
  AND: [jkbbWhereInput!]
  OR: [jkbbWhereInput!]
  NOT: [jkbbWhereInput!]
  id: IDFilter
  account: StringFilter
  password: StringFilter
  departName: StringFilter
  instructorName: StringFilter
  address: StringFilter
  latitude: StringFilter
  longitude: StringFilter
  permanentAddress: StringFilter
  isStayLocal: StringNullableFilter
  isStaySchool: StringNullableFilter
  phone_number: StringFilter
  emergencyName: StringFilter
  emergencyPhone: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input jkbbOrderByInput {
  id: OrderDirection
  account: OrderDirection
  password: OrderDirection
  departName: OrderDirection
  instructorName: OrderDirection
  address: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  permanentAddress: OrderDirection
  isStayLocal: OrderDirection
  isStaySchool: OrderDirection
  phone_number: OrderDirection
  emergencyName: OrderDirection
  emergencyPhone: OrderDirection
}

input jkbbUpdateInput {
  account: String
  password: String
  departName: String
  instructorName: String
  address: String
  latitude: String
  longitude: String
  permanentAddress: String
  isStayLocal: String
  isStaySchool: String
  phone_number: String
  emergencyName: String
  emergencyPhone: String
}

input jkbbUpdateArgs {
  where: jkbbWhereUniqueInput!
  data: jkbbUpdateInput!
}

input jkbbCreateInput {
  account: String
  password: String
  departName: String
  instructorName: String
  address: String
  latitude: String
  longitude: String
  permanentAddress: String
  isStayLocal: String
  isStaySchool: String
  phone_number: String
  emergencyName: String
  emergencyPhone: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createjkbb(data: jkbbCreateInput!): jkbb
  createJkbbs(data: [jkbbCreateInput!]!): [jkbb]
  updatejkbb(where: jkbbWhereUniqueInput!, data: jkbbUpdateInput!): jkbb
  updateJkbbs(data: [jkbbUpdateArgs!]!): [jkbb]
  deletejkbb(where: jkbbWhereUniqueInput!): jkbb
  deleteJkbbs(where: [jkbbWhereUniqueInput!]!): [jkbb]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  jkbbs(
    where: jkbbWhereInput! = {}
    orderBy: [jkbbOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [jkbb!]
  jkbb(where: jkbbWhereUniqueInput!): jkbb
  jkbbsCount(where: jkbbWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
